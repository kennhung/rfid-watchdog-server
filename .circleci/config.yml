version: 2 # use CircleCI 2.0
references:
  container_config: &container_config
    docker:
    - image: circleci/openjdk:8-jdk-browsers
    working_directory: ~/repo
    environment:
      MAVEN_OPTS: -Xmx3200m
  workspace_root: &workspace_root
                    /tmp/workspace

  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

  restore_repo: &restore_repo
    restore_cache:
      keys:
      - v1-repo-{{ .Branch }}-{{ .Revision }}
      - v1-repo-{{ .Branch }}
      - v1-repo
  jars_cache_key: &jars_cache_key
                    project-{{ checksum "pom.xml" }}
  restore_jars: &restore_jars
    restore_cache:
      keys:
      - *jars_cache_key
jobs:
  build:
    <<: *container_config
    steps:
    - checkout

    - run:
        name: Show current branch
        command: echo ${CIRCLE_BRANCH}

    - restore_cache: # restore the saved cache after the first run or if `pom.xml` has changed
        key: project-{{ checksum "pom.xml" }}

    - run: mvn dependency:go-offline
    - save_cache:
        paths:
        - ~/.m2
        key: project-{{ checksum "pom.xml" }}
    - run: mvn validate
    - run: mvn compile
    - save_cache:
        key: v1-repo-{{ .Branch }}-{{ .Revision }}
        paths:
        - .
  test:
    <<: *container_config
    steps:
    - *attach_workspace
    - *restore_repo
    - restore_cache: # restore the saved cache after the first run or if `pom.xml` has changed
        key: project-{{ checksum "pom.xml" }}
    - run: mvn test
    - run:
        name: Save test results
        command: |
          mkdir -p ~/junit/
          find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/junit/ \;
        when: always
    - store_test_results:
        path: ~/junit
    - store_artifacts:
        path: ~/junit
  deploy:
    <<: *container_config
    steps:
    - *restore_repo
    - restore_cache: # restore the saved cache after the first run or if `pom.xml` has changed
        key: project-{{ checksum "pom.xml" }}
    - run: mvn package
    - run:
        name: Deploy Master to Heroku
        command: |
          git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git master

workflows:
  version: 2
  build_and_test:
    jobs:
    - build
    - test:
        requires:
        - build
    - deploy:
        requires:
        - test
        filters:
          branches:
            only:
            - master

